'use client'
import localFont from 'next/font/local'
import './globals.css'
import '@mantine/core/styles.css'
import { ColorSchemeScript, MantineProvider, createTheme } from '@mantine/core'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { ReactQueryDevtools } from '@tanstack/react-query-devtools'
import axios from 'axios' // 追加: axiosをインポート
import { useEffect } from 'react' // 追加

// metadataは、use clientでは使用できない
// export const metadata: Metadata = {
//   title: 'Create Next App',
//   description: 'Generated by create next app',
// }

const geistSans = localFont({
  src: './fonts/GeistVF.woff',
  variable: '--font-geist-sans',
  weight: '100 900',
})
const geistMono = localFont({
  src: './fonts/GeistMonoVF.woff',
  variable: '--font-geist-mono',
  weight: '100 900',
})

// Mantineのテーマを作成
const theme = createTheme({
  fontFamily: 'Verdana, sans-serif',
  primaryColor: 'cyan',
})

// React Queryのセットアップ
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      refetchOnWindowFocus: false,
      retry: false,
    },
  },
})

// RootLayoutはデフォルトで、'use server'であることを示す
export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  // Axiosのセットアップ(Cookieを使用するため)
  axios.defaults.withCredentials = true
  // axiosを使用するリクエスト全てにCSRFトークンを含める設定
  useEffect(() => {
    const getCsrfToken = async () => {
      try {
        const url = `${process.env.NEXT_PUBLIC_API_URL}/auth/csrf-token`
        console.log('Fetching CSRF token from:', url) // URLをログに出力
        const { data } = await axios.get(url)
        axios.defaults.headers.common['csrf-token'] = data.csrfToken
        console.log(data)
      } catch (error) {
        console.error('CSRFトークンの取得に失敗しました:', error)
        if (axios.isAxiosError(error)) {
          console.error('Error details:', error.response?.data) // エラー詳細をログに出力
        }
      }
    }
    getCsrfToken()
  }, [])
  return (
    <html lang="ja">
      <head>
        <ColorSchemeScript />
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <QueryClientProvider client={queryClient}>
          <MantineProvider theme={theme} defaultColorScheme="dark">
            {/* <ClientLayout>{children}</ClientLayout> */}
            {children}
          </MantineProvider>
          <ReactQueryDevtools />
        </QueryClientProvider>
      </body>
    </html>
  )
}
